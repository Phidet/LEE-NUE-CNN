""" Parts of the U-Net model """

import torch
import torch.nn as nn
import torch.nn.functional as F



class Down(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.conv22 = nn.Conv2d(in_channels, out_channels, kernel_size=2, stride=2)
        self.conv31 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)
        self.conv12 = nn.Conv2d(int(in_channels), out_channels, kernel_size=1, stride=2)
        self.bn_0 = nn.BatchNorm2d(out_channels)
        self.bn_1 = nn.BatchNorm2d(out_channels)
        self.bn_2 = nn.BatchNorm2d(out_channels)
        self.relu_0 = nn.ReLU(inplace=True)
        self.relu_1 = nn.ReLU(inplace=True)

    def forward(self, x):
        y = self.conv22(x)
        y = self.bn_0(y)
        self.relu_0(y)
        y = self.conv31(y)
        y = self.bn_1(y)
        x = self.conv12(x)# linear projection residual shortcut connection to match changed dims
        x = self.bn_2(x)
        x +=y
        self.relu_1(x)
        return x

class Up(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        # Instantiate the stack of residual units
        self.convTrans22 = nn.ConvTranspose2d(in_channels, out_channels, kernel_size=2, stride=2)
        self.bn_0 = nn.BatchNorm2d(in_channels)
        self.conv31 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1)
        self.bn_1 = nn.BatchNorm2d(out_channels)
        self.relu_0 = nn.ReLU(inplace=True) # Defining the activation function twice is not necessary but helps with visualisation in Tensorboard 
        self.relu_1 = nn.ReLU(inplace=True)

    def forward(self, x, skip):
        x = self.convTrans22(x)
        x = torch.cat((x, skip), dim=1)
        x = self.bn_0(x)
        self.relu_0(x)
        x = self.conv31(x)
        x = self.bn_1(x)
        self.relu_1(x)
        return x

# class Up(nn.Module):
#     def __init__(self, in_channels, doUpsample=False):
#         super().__init__()
#         self.doUpsample = doUpsample
#         channels = in_channels//2 if doUpsample else in_channels
        
#         # Instantiate the stack of residual units
#         self.conv31 = nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)
#         self.convTrans22 = nn.ConvTranspose2d(num_filters, kernel_size=2, stride=2, padding=1)
#         self.convTrans12 = nn.ConvTranspose2d(num_filters, kernel_size=1, stride=2)
#         self.concat = torch.cat()
#         self.bn = nn.BatchNorm2d(in_channels)
#         self.ReLU = nn.ReLU(inplace=True)
#     def forward(self, x, skip):
#         if self.doUpsample:
#             y = self.convTrans22(x)
#             y = self.concat((y, skip))
#         else:
#             y = self.conv31(x)
#         y = self.bn(y)
#         self.ReLU(y)
#         y = self.conv31(y)
#         y = self.bn(y)
#         if doUpsample: # linear projection residual shortcut connection to match changed dims
#             x = self.convTrans12(x)
#             x = self.bn(x)
#         x+=y
#         self.ReLU(x)
#         return x



class DoubleConvNoResidual(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)


class DoubleConv2(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels

        self.conv31_0 = nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)
        self.bn_0 = nn.BatchNorm2d(mid_channels)
        self.relu_0 = nn.ReLU(inplace=True)
        self.conv31_1 = nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1)
        self.bn_1 = nn.BatchNorm2d(out_channels)
        self.relu_1 = nn.ReLU(inplace=True)

    def forward(self, x):
        y = self.conv31_0(x)
        y = self.bn_0(y)
        self.relu_0(y)
        y = self.conv31_1(y)
        y = self.bn_1(y)
        y += x
        self.relu_1(y)
        return y


class DoubleConv3(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels

        self.conv31_0 = nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)
        self.bn_0 = nn.BatchNorm2d(mid_channels)
        self.relu_0 = nn.ReLU(inplace=True)
        self.conv31_1 = nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1)
        self.bn_1 = nn.BatchNorm2d(out_channels)
        self.relu_1 = nn.ReLU(inplace=True)

    def forward(self, x):
        y = self.conv31_0(x)
        y = self.bn_0(y)
        self.relu_0(y)
        y = self.conv31_1(y)
        y = self.bn_1(y)
        y += x
        self.relu_1(y)
        return y


# class Up(nn.Module):
#     """Upscaling then double conv"""

#     def __init__(self, in_channels, out_channels, bilinear=False):
#         super().__init__()

#         # if bilinear, use the normal convolutions to reduce the number of channels
#         if bilinear:
#             self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
#             self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)
#         else:
#             self.up = nn.ConvTranspose2d(in_channels , in_channels // 2, kernel_size=2, stride=2)
#             self.conv = DoubleConv(in_channels, out_channels)

#     def forward(self, x1, x2):
#         x1 = self.up(x1)
#         # input is CHW
#         diffY = x2.size()[2] - x1.size()[2]
#         diffX = x2.size()[3] - x1.size()[3]
#         x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
#                         diffY // 2, diffY - diffY // 2])
#         # if you have padding issues, see
#         # https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a
#         # https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd
#         x = torch.cat([x2, x1], dim=1)
#         return self.conv(x)


class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)
